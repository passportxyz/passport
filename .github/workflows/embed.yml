name: Deploy Embed Popup to S3 and Invalidate CloudFront

on:
  workflow_dispatch:
    inputs:
        commit:
            description: "Leave blank to use current HEAD, or provide an override commit SHA"
            type: string
            required: false
        environment:
            description: "Environment to deploy"
            required: true
            default: "review"
            type: choice
            options:
                - review
                - staging
                - production
            

jobs:
    deploy:
        name: Deploy to ${{ inputs.environment }}
        runs-on: ubuntu-latest

        env:
            AWS_REGION: us-west-2 
            CORE_INFRA_PULUMI_STACK: passportxyz/core-infra/${{ inputs.environment }}
            ONE_PASS_ENV: passport-embed-${{ inputs.environment }}-env 

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                node-version: 22.14.0
                cache: "yarn"
    
            - name: Load secret
              id: op-load-secret
              uses: 1password/load-secrets-action@v1
              with:
                  export-env: true
              env:
                OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
                PULUMI_ACCESS_TOKEN: op://DevOps/passport-xyz-${{ inputs.environment }}-secrets/ci/PULUMI_ACCESS_TOKEN
                AWS_ACCESS_KEY_ID: op://DeployerVault/github-aws-${{ inputs.environment }}/ci/AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: op://DeployerVault/github-aws-${{ inputs.environment }}/ci/AWS_SECRET_ACCESS_KEY
            
            - name: Install 1Password CLI
              uses: 1password/install-cli-action@v1
            
            - name: Configure 1Password Service Account
              uses: 1password/load-secrets-action/configure@v1
              with:
                service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
                
            - name: Set AWS_SESSION_TOKEN if needed
              if: inputs.environment == 'production'
              run: echo "AWS_SESSION_TOKEN=$(op read op://DeployerVault/github-aws-production/ci/AWS_SESSION_TOKEN)" >> $GITHUB_ENV

            - name: Create .env file
              working-directory: embed-popup
              run: |
                echo "ONE_PASS_ENV=$ONE_PASS_ENV"
                op item get "$ONE_PASS_ENV" --vault "DevOps" --format json | \
                jq -r '.fields[] | select(.section.label=="App") | "\(.label)=\(.value)"' > .env 
                cat .env >> $GITHUB_ENV

            - name: Cat .env file
              working-directory: embed-popup
              run: |
                cat .env
                
            - name: Install Dependencies
              working-directory: .
              run: yarn install --frozen-lockfile

            - name: Build Application
              working-directory: .
              run: yarn build

            - name: Install Pulumi CLI
              uses: pulumi/actions@v4
              with:
                pulumi-version: latest

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v2
              with:
                aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION }}

            - name: Get Pulumi Stack Outputs From Core Infra
              run: |
               BUCKET_NAME=$(pulumi stack output embedPopupBucketName --stack ${{ env.CORE_INFRA_PULUMI_STACK }})
               CLOUDFRONT_ID=$(pulumi stack output embedPopupDistributionId --stack ${{ env.CORE_INFRA_PULUMI_STACK }})

               echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
               echo "CLOUDFRONT_ID=$CLOUDFRONT_ID" >> $GITHUB_ENV

            - name: Sync Files to S3
              working-directory: embed-popup
              run: aws s3 sync ./dist s3://${{ env.BUCKET_NAME }} --delete

            - name: Create CloudFront Invalidation
              id: create_invalidation
              run: |
                INVALIDATION_ID=$(aws cloudfront create-invalidation \
                --distribution-id ${{ env.CLOUDFRONT_ID }} \
                --paths "/*" \
                --query 'Invalidation.Id' \
                --output text)
                echo "INVALIDATION_ID=$INVALIDATION_ID" >> $GITHUB_ENV

            - name: Wait for Invalidation Completion
              id: check_invalidation
              run: |
                echo "Waiting for invalidation ID: ${{ env.INVALIDATION_ID }}"
                for i in {1..20}; do
                    STATUS=$(aws cloudfront get-invalidation \
                    --distribution-id ${{ env.CLOUDFRONT_ID }} \
                    --id ${{ env.INVALIDATION_ID }} \
                    --query 'Invalidation.Status' \
                    --output text)
                    echo "Invalidation Status: $STATUS"
                    if [ "$STATUS" == "Completed" ]; then
                        echo "CloudFront invalidation completed successfully."
                        exit 0
                    fi
                    if [ "$STATUS" == "Failed" ]; then
                        echo "CloudFront invalidation failed!"
                        exit 1
                    fi
                    sleep 15
                done
                echo "CloudFront invalidation check timed out!"
                exit 1

            - name: Deployment Completed
              run: echo "Deployment and CloudFront invalidation successful!"
