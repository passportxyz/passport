name: Library - Push App to S3

on:
  workflow_call:
    inputs:
      refspec:
        description: "The commit SHA"
        type: string
        required: true
      environment:
        description: "Environment to deploy to"
        type: string
        required: true

jobs:
  build:
    name: Push App to S3
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-west-2
      CORE_INFRA_PULUMI_STACK: passportxyz/core-infra/${{ inputs.environment }}
      ONE_PASS_ENV: passport-xyz-${{ inputs.environment }}-env

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: passport-app-${{ inputs.environment }}
          path: app/out

      - name: Load secret
        id: op-load-secret
        uses: 1password/load-secrets-action@v1
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          AWS_ACCESS_KEY_ID: op://DeployerVault/github-aws-${{ inputs.environment }}/ci/AWS_ACCESS_KEY_ID
          AWS_SECRET_ACCESS_KEY: op://DeployerVault/github-aws-${{ inputs.environment }}/ci/AWS_SECRET_ACCESS_KEY
          PULUMI_ACCESS_TOKEN: op://DeployerVault/github-aws-${{ inputs.environment }}/ci/PULUMI_ACCESS_TOKEN

      - name: Configure 1Password Service Account
        uses: 1password/load-secrets-action/configure@v1
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Install Pulumi CLI
        uses: pulumi/actions@v4
        with:
          pulumi-version: latest

      - name: Set AWS_SESSION_TOKEN if needed
        if: inputs.environment == 'production'
        run: echo "AWS_SESSION_TOKEN=$(op read op://DeployerVault/github-aws-production/ci/AWS_SESSION_TOKEN)" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }}

      - name: Get Pulumi Stack Outputs From Core Infra
        id: get_pulumi_outputs
        run: |
          BUCKET_NAME=$(pulumi stack output passportAppBucketName --stack ${{ env.CORE_INFRA_PULUMI_STACK }})
          CLOUDFRONT_ID=$(pulumi stack output passportAppDistributionId --stack ${{ env.CORE_INFRA_PULUMI_STACK }})

          if [[ -z "$BUCKET_NAME" || -z "$CLOUDFRONT_ID" ]]; then
            echo "Error: Failed to retrieve Pulumi stack outputs!"
            exit 1
          fi

          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
          echo "CLOUDFRONT_ID=$CLOUDFRONT_ID" >> $GITHUB_ENV

      - name: Sync Files to S3
        working-directory: app
        run: |
          if [ -d "out" ]; then
              aws s3 sync ./out s3://${{ env.BUCKET_NAME }} --delete
          else
              echo "out folder not found!"
              exit 1
          fi

      - name: Create CloudFront Invalidation
        id: create_invalidation
        run: |
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
          --distribution-id ${{ env.CLOUDFRONT_ID }} \
          --paths "/*" \
          --query 'Invalidation.Id' \
          --output text)

          if [[ -z "$INVALIDATION_ID" ]]; then
            echo "CloudFront invalidation failed!"
            exit 1
          fi

          echo "INVALIDATION_ID=$INVALIDATION_ID" >> $GITHUB_ENV

      - name: Wait for Invalidation Completion
        id: check_invalidation
        run: |
          echo "Waiting for invalidation ID: ${{ env.INVALIDATION_ID }}"
          for i in {1..20}; do
              STATUS=$(aws cloudfront get-invalidation \
              --distribution-id ${{ env.CLOUDFRONT_ID }} \
              --id ${{ env.INVALIDATION_ID }} \
              --query 'Invalidation.Status' \
              --output text)
              echo "Invalidation Status: $STATUS"
              if [ "$STATUS" == "Completed" ]; then
                  echo "CloudFront invalidation completed successfully."
                  exit 0
              fi
              if [ "$STATUS" == "Failed" ]; then
                  echo "CloudFront invalidation failed!"
                  exit 1
              fi
              sleep 15
          done
          echo "CloudFront invalidation check timed out!"
          exit 1

      - name: Deployment Completed
        run: echo "Deployment and CloudFront invalidation successful!"
